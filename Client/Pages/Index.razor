@page "/"

@if (_directoryListing != null)
{
    <table class="table">
        <thead>
            <tr>
                <th colspan="2">
                    <DirectoryPathLinks FullPath=@_directoryListing.FullName ChangeDirectory=ChangeToAbsoluteDirectory />
                </th>
            </tr>
            <tr>
                <th>Name</th>
                <th>Size</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th colspan="2">  
                    <DirectoryLink Directory=@ParentDir ChangeDirectory=ChangeDirectory />
                </th>
            </tr>

            @foreach (var d in _directories)
            {
                <tr>
                    <th colspan="2">
                        <DirectoryLink Directory=@d ChangeDirectory=ChangeDirectory />
                    </th>
                </tr>
            }

            @foreach (var f in _files)
            {
                <tr>
                    <th><FileLink File=@f Click=DownloadFile /></th>
                    <th>@FormatSize(f.Size)</th>
                </tr>
            }
            
        </tbody>
    </table>
}

@code{
    const string ParentDir = "..";

    DirectoryListingDto? _directoryListing { get; set; }

    IEnumerable<string> _directories => _directoryListing?.Directories ?? Enumerable.Empty<string>();

    IEnumerable<FileDto> _files => _directoryListing?.Files ?? Enumerable.Empty<FileDto>();

    [Inject]
    HttpClient? http { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _directoryListing = await http!.GetFromJsonAsync<DirectoryListingDto>("./api/FileExplorer");
    }

    private async Task ChangeToAbsoluteDirectory(string directory)
    {
        var path = System.Web.HttpUtility.UrlEncode(directory);
        _directoryListing = await http!.GetFromJsonAsync<DirectoryListingDto>("./api/FileExplorer?path=" + path);
    }

    private async Task ChangeDirectory(string directory)
    {
        var path = System.Web.HttpUtility.UrlEncode(Path.Combine(_directoryListing!.FullName!, directory));
        _directoryListing = await http!.GetFromJsonAsync<DirectoryListingDto>("./api/FileExplorer?path=" + path);
    }

    private async Task DownloadFile(string fileName)
    {
        var path = System.Web.HttpUtility.UrlEncode(Path.Combine(_directoryListing!.FullName!, fileName));
        var responseStream = await http!.GetStreamAsync("./api/FileExplorer?path=" + path);
        using var streamRef = new DotNetStreamReference(responseStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private string FormatSize(long size)
    {
        if (size < 1024)
        {
            return $"{size}\u00A0B";
        }
        if (size < 1024 * 1024)
        {
            return $"{size / 1024.0:F1}\u00A0KB";
        }
        if (size < 1024 * 1024 * 1024)
        {
            return $"{size / 1024.0 / 1024.0:F2}\u00A0MB";
        }

        return $"{size / 1024.0 / 1024.0 / 1024.0:F3}\u00A0GB";
    }
}

